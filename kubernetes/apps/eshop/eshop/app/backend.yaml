---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-backend
  labels:
    app: eshop-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eshop-backend
  template:
    metadata:
      labels:
        app: eshop-backend
    spec:
      initContainers:
      - name: wait-for-mysql
        image: mysql:8.0
        command:
        - /bin/bash
        - -c
        - |
          echo "Waiting for MySQL to be ready..."
          until mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"; do
            echo "MySQL not ready yet, waiting 5 seconds..."
            sleep 5
          done
          echo "MySQL is ready!"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
      containers:
      - name: backend
        # You'll need to build and push this image to a registry
        # For now, using a placeholder - we'll need to build from your node/ folde
        image: ghcr.io/glamprinakis/eshop-backend:202508311436
        env:
        # MySQL environment variables that your Node.js app expects (from docker-compose.yml)
        - name: MYSQL_ROOT_USER
          value: root
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: database
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "yes"
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        # Health checks - increased delays to give app time to start
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: eshop-backend
  labels:
    app: eshop-backend
spec:
  selector:
    app: eshop-backend
  ports:
  - port: 3000
    targetPort: 3000
    name: http
